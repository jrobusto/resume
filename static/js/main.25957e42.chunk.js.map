{"version":3,"sources":["utils/theme.ts","sections/PageHeader/components/ResumeTitle.tsx","components/Icon.tsx","sections/PageHeader/components/ContactLink.tsx","sections/PageHeader/components/ContactDetails.tsx","sections/PageHeader/PageHeader.tsx","components/SectionName.tsx","components/DateRange.tsx","components/SidebarHeader.tsx","components/ItemTitle.tsx","sections/PageBody/Experience/components/JobItem.tsx","components/Mono.tsx","sections/PageBody/Experience/Experience.tsx","sections/PageBody/Education/Education.tsx","sections/Skills/Skills.tsx","sections/PageBody/PageBody.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultTheme","headerFont","bodyFont","monoFont","primaryColor","secondaryColor","mutedColor","white","styled","baseStyled","NameHeader","h1","_templateObject","props","theme","TitleHeader","h2","_templateObject2","ResumeTitle","react","fullName","jobTitle","Icon","iconType","type","includes","concat","className","ContactType","Link","a","ContactLink_templateObject","ContactLink","href","value","displayAs","EMAIL","PHONE","phoneNumber","parsePhoneNumberFromString","getURI","formatNational","replace","DetailsList","ul","ContactDetails_templateObject","ContactDetails","email","phone","OTHER","github","HeaderGrid","div","withConfig","displayName","componentId","PageHeader","SectionName","SectionName_templateObject","DateRange","p","DateRange_templateObject","SidebarHeader","h3","SidebarHeader_templateObject","ItemTitle","h4","ItemTitle_templateObject","JobGrid","JobItem_templateObject","Accomplishments","JobItem_templateObject2","JobItem","start","moment","job","startDate","format","bullets","map","b","i","key","end","endDate","companyName","Mono","code","Mono_templateObject","Stack","Experience_templateObject","jobs","year","month","toDate","Experience","jobList","j","SchoolGrid","Education_templateObject","EducationContext","Education_templateObject2","EducationDescription","_templateObject3","Education","SkillsList","Skills_templateObject","Level","span","Skills_templateObject2","Skills","BodyDiv","PageBody_templateObject","TwoColumns","PageBody_templateObject2","PageBody","Resume","App_templateObject","Boolean","window","location","hostname","match","ReactDOM","render","react_default","createElement","styled_components_browser_esm","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25957e42.chunk.js","sourcesContent":["import baseStyled, { ThemedStyledInterface } from \"styled-components/macro\";\n\nimport { FontFamilyProperty, Color } from \"csstype\";\n\nexport interface Theme {\n    headerFont: FontFamilyProperty;\n    bodyFont: FontFamilyProperty;\n    monoFont: FontFamilyProperty;\n    primaryColor: Color;\n    secondaryColor: Color;\n    mutedColor: Color;\n    white: Color;\n}\n\nexport const defaultTheme: Theme = {\n    headerFont: \"'Work Sans', sans- serif\",\n    bodyFont: \"'Taviraj', serif\",\n    monoFont: \"'Space Mono', monospace\",\n    primaryColor: \"#8789C0\",\n    secondaryColor: \"#545E75\",\n    mutedColor: \"#D8DDF0\",\n    white: \"#FFFFFF\",\n};\n\nexport const styled = baseStyled as ThemedStyledInterface<Theme>;\n","import * as React from \"react\";\n\nimport { styled } from \"../../../utils/theme\";\n\ninterface NameProps {\n    fullName: string;\n    jobTitle: string;\n}\n\nexport const NameHeader = styled.h1`\n    font-family: ${props => props.theme.headerFont};\n    margin-top: 0;\n`;\n\nexport const TitleHeader = styled.h2`\n    font-family: ${props => props.theme.headerFont};\n`;\n\nexport function ResumeTitle(props: NameProps): JSX.Element {\n    return (\n        <div>\n            <NameHeader>{props.fullName}</NameHeader>\n            <TitleHeader>{props.jobTitle}</TitleHeader>\n        </div>\n    );\n}\n","import * as React from \"react\";\n\ntype IconType = \"mail\" | \"call\" | \"logo-github\" | \"construct\" | \"briefcase\" | \"school\";\n\ninterface IconProps {\n    type: IconType;\n}\n\nexport function Icon(props: IconProps): JSX.Element {\n    let iconType: string = props.type;\n    if (!iconType.includes(\"logo\")){\n        iconType = `md-${iconType}`;\n    }\n    return (\n        <span className={`icon ion-${iconType}`} />\n    );\n}\n","import * as React from \"react\";\nimport { styled } from \"../../../utils/theme\";\nimport { parsePhoneNumberFromString } from \"libphonenumber-js\";\n\nexport enum ContactType {\n    PHONE = \"PHONE\",\n    EMAIL = \"EMAIL\",\n    OTHER = \"OTHER\"\n}\n\ninterface ContactLinkProps {\n    type: ContactType;\n    value: string;\n}\n\nconst Link = styled.a`\n    text-decoration: none;\n    color: ${props => props.theme.mutedColor};\n    :hover {\n        color: ${props => props.theme.secondaryColor}\n    }\n`;\n\nexport function ContactLink(props: ContactLinkProps): JSX.Element {\n    let href = props.value;\n    let displayAs = props.value;\n    if (props.type === ContactType.EMAIL) {\n        href = `mailto:${props.value}`;\n    } else if (props.type === ContactType.PHONE) {\n        var phoneNumber = parsePhoneNumberFromString(props.value);\n        if (phoneNumber) {\n            href = phoneNumber.getURI();\n            displayAs = phoneNumber.formatNational();\n        }\n    } else {\n        href = props.value;\n        displayAs = displayAs.replace(/https:\\/\\/|www\\./, \"\");\n    }\n    return (\n        <Link href={href}>{displayAs}</Link>\n    );\n}\n","import * as React from \"react\";\n\nimport { Icon } from \"../../../components/Icon\";\nimport { ContactLink, ContactType } from \"./ContactLink\";\nimport { styled } from \"../../../utils/theme\";\n\ninterface ContactDetailsProps {\n    email: string;\n    phone: string;\n    github: string;\n}\n\nconst DetailsList = styled.ul`\n    font-family: ${props => props.theme.monoFont};\n    list-style: none;\n    padding-left: 0;\n    margin-top: 0;\n`;\n\nexport function ContactDetails(props: ContactDetailsProps): JSX.Element {\n    return (\n        <DetailsList>\n            <li>\n                <Icon type=\"mail\" />&nbsp;\n                    <ContactLink\n                    type={ContactType.EMAIL}\n                    value={props.email}\n                />\n            </li>\n            <li>\n                <Icon type=\"call\" />&nbsp;\n                    <ContactLink\n                    type={ContactType.PHONE}\n                    value={props.phone}\n                />\n            </li>\n            <li>\n                <Icon type=\"logo-github\" />&nbsp;\n                    <ContactLink\n                    type={ContactType.OTHER}\n                    value={props.github}\n                />\n            </li>\n        </DetailsList>\n    );\n}\n","import * as React from \"react\";\nimport styled from \"styled-components/macro\";\n\nimport { ResumeTitle } from \"./components/ResumeTitle\";\nimport { ContactDetails } from \"./components/ContactDetails\";\n\ninterface PageHeaderProps {\n}\n\nconst HeaderGrid = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    background-color: ${props => props.theme.primaryColor};\n    color: ${props => props.theme.white};\n    padding-top: 1em;\n    padding-left: 1em;\n    -webkit-print-color-adjust: exact !important;\n`;\n\nexport function PageHeader(props: PageHeaderProps): JSX.Element {\n\n    return (\n        <HeaderGrid>\n            <ResumeTitle\n                fullName=\"Joshua Robusto\"\n                jobTitle=\"software engineer\"\n            />\n            <ContactDetails\n                email=\"joshuarobusto@gmail.com\"\n                phone=\"+14438676452\"\n                github=\"https://github.com/jrobusto\"\n            />\n        </HeaderGrid>\n    );\n}\n","import { styled } from \"../utils/theme\";\n\nexport const SectionName = styled.h2`\n    font-family: ${props => props.theme.headerFont};\n    color: ${props => props.theme.primaryColor};\n    border-bottom: ${props => props.theme.primaryColor};\n    border-bottom-width: 1px;\n    border-bottom-style: solid;\n`","import { styled } from \"../utils/theme\";\n\nexport const DateRange = styled.p`\n    font-family: ${props => props.theme.headerFont};\n    font-weight: 300;\n    font-size: .9em;\n    color: ${props => props.theme.secondaryColor};\n    margin-top: 0;\n`\n","import { styled } from \"../utils/theme\";\n\nexport const SidebarHeader = styled.h3`\n    margin-top: 0;\n    margin-bottom: 0.5em;\n    font-family: ${props => props.theme.headerFont};\n    font-weight: 400;\n`;","import { styled } from \"../utils/theme\";\n\nexport const ItemTitle = styled.h4`\n    font-family: ${props => props.theme.headerFont};\n    margin-top: 0;\n    margin-bottom: 0.5em;\n`;","import * as React from \"react\";\nimport { Job } from \"../Experience\";\n\nimport { styled } from \"../../../../utils/theme\";\nimport moment from \"moment\";\nimport { DateRange } from \"../../../../components/DateRange\";\nimport { SidebarHeader } from \"../../../../components/SidebarHeader\";\nimport { ItemTitle } from \"../../../../components/ItemTitle\";\ninterface JobItemProps {\n    job: Job;\n}\n\nconst JobGrid = styled.div`\n display: grid;\n    grid-template-columns: 1fr 4fr;\n`\n\nconst Accomplishments = styled.ul`\n    margin-top: 0;\n    font-size: .8em;\n    list-style-type: square;\n    list-style-position: inside;\n    padding-left: 0.25em;\n`;\n\nexport function JobItem(props: JobItemProps): JSX.Element {\n    const start = moment(props.job.startDate).format(\"MMM Y\");\n    const bullets = props.job.bullets.map((b, i) =>\n        <li key={`bullet-${i}`}>{b}</li>\n    );\n    const end = props.job.endDate ? moment(props.job.endDate).format(\"MMM Y\") : \"Present\"\n    return (\n        <JobGrid>\n            <div>\n                <SidebarHeader>{props.job.companyName}</SidebarHeader>\n                <DateRange>{start} - {end}</DateRange>\n            </div>\n            <div>\n                <ItemTitle>{props.job.jobTitle}</ItemTitle>\n                <Accomplishments>\n                    {bullets}\n                </Accomplishments>\n            </div>\n        </JobGrid>\n    );\n}\n","import { styled } from \"../utils/theme\";\n\nexport const Mono = styled.code`\n    font-family: ${props => props.theme.monoFont};\n    font-size: 1em;\n`\n","import * as React from \"react\";\nimport moment from \"moment\";\n\nimport { SectionName } from \"../../../components/SectionName\";\nimport { JobItem } from \"./components/JobItem\";\nimport { Mono } from \"../../../components/Mono\";\nimport { styled } from \"../../../utils/theme\";\nimport { Icon } from \"../../../components/Icon\";\n\ninterface ExperienceProps {\n}\n\nexport interface Job {\n    companyName: string;\n    startDate: Date;\n    endDate?: Date;\n    jobTitle: string;\n    bullets: React.ReactNode[];\n}\n\nconst Stack = styled(Mono)`\n    font-style: italic;\n    color: ${props => props.theme.secondaryColor};\n`;\n\nconst jobs: Job[] = [\n    {\n        companyName: \"Polly\",\n        startDate: moment().year(2017).month(\"August\").toDate(),\n        jobTitle: \"Software Enginner\",\n        bullets: [\n            <>\n                Developed front-end software in React. Coordinated and maintained the component library, improving developer output\n                 and the consistency of the user experience. Provided guidance for other engineers to extend the library and\n                 best apply React features to optimize component performance.\n                 <Stack> (TypeScript, React, SCSS, MongoDB)</Stack>\n            </>,\n            <>\n                Developed large-scale back end software. Wrote back-end web-application software to process millions of AWS SQS events each month.\n                <Stack> (Node.js, MongoDB, AWS SQS, AWS Lambda)</Stack>\n            </>,\n            <>\n                Used the Slack API to provide data synchronization and native, user-friendly UX for one of the most used Slack applications.\n                Refactored code to improve throughput and reduce customer wait time due to API rate limiting. Added integration with Heap API to\n                consistently track user actions in both Slack and the web-app.\n            </>,\n        ]\n    },\n    {\n        companyName: \"CSRA\",\n        startDate: moment().year(2017).month(\"January\").toDate(),\n        endDate: moment().year(2017).month(\"August\").toDate(),\n        jobTitle: \"Software Engineer\",\n        bullets: [\n            <>Developed and maintained case-management system web-app for processing refugee applications. <Stack>(Java, C#, T-SQL)</Stack></>,\n            <>Modified existing database stored procedures to align with code standards of maintainability.</>,\n            <>Hardened security within the application to better protect data of applicants and employees.</>,\n        ]\n    },\n    {\n        companyName: \"42Six Solutions\",\n        startDate: moment().year(2014).month(\"October\").toDate(),\n        endDate: moment().year(2017).month(\"January\").toDate(),\n        jobTitle: \"Software Engineer\",\n        bullets: [\n            <>Created Angular.js webapp that pulled data from a RESTful JSON service and presented the results in a user-friendly\n            and customizable format, resulting in a strong and competitive proposal for the company. <Stack>(Node.js, JS, AngularJS)</Stack></>,\n            <>Modified machine learning workflows to properly use Apache Spark features for more reliable and efficient distributed processing, increasing performance. <Stack>(Python, Spark)</Stack></>,\n            <>Added an option to the machine learning job, both in the back-end and the frontend Angular web-app for launching and viewing the results of jobs. <Stack>(Python, Django, AngularJS)</Stack></>\n        ]\n    }\n];\n\nexport function Experience(props: ExperienceProps): JSX.Element {\n    const jobList = jobs.map((j) =>\n        <JobItem key={j.companyName} job={j} />\n    );\n    return (\n        <div>\n            <SectionName><Icon type=\"briefcase\" /> Experience</SectionName>\n            {jobList}\n        </div>\n    );\n}\n","import * as React from \"react\";\n\nimport { SectionName } from \"../../../components/SectionName\";\nimport { Icon } from \"../../../components/Icon\";\nimport { styled } from \"../../../utils/theme\";\nimport { SidebarHeader } from \"../../../components/SidebarHeader\";\nimport { DateRange } from \"../../../components/DateRange\";\nimport { ItemTitle } from \"../../../components/ItemTitle\";\n\ninterface EducationProps {\n}\n\nconst SchoolGrid = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-auto-rows: auto;\n`\n\nconst EducationContext = styled.div`\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n`\nconst EducationDescription = styled.p`\n    margin: 0;\n    font-family: ${props => props.theme.bodyFont};\n    font-style: italic;\n`;\n\nexport function Education(props: EducationProps): JSX.Element {\n\n    return (\n        <div>\n            <SectionName><Icon type=\"school\" /> Education</SectionName>\n            <SchoolGrid>\n                <div>\n                    <SidebarHeader>Georgia Tech</SidebarHeader>\n                    <DateRange>2017 - 2018</DateRange>\n                </div>\n                <div>\n                    <EducationDescription>Graduate coursework in Artificial Intelligence, Robotics, &amp; Data Visualization</EducationDescription>\n                </div>\n                <div>\n                    <SidebarHeader>University of Maryland</SidebarHeader>\n                    <DateRange>2010 - 2013</DateRange>\n                </div>\n                <EducationContext>\n                    <ItemTitle>B.S. in Psychology</ItemTitle>\n                    <EducationDescription>Minor in Computer Science</EducationDescription>\n                </EducationContext>\n            </SchoolGrid>\n        </div>\n    );\n}\n","import * as React from \"react\";\nimport { SectionName } from \"../../components/SectionName\";\nimport { Icon } from \"../../components/Icon\";\nimport { styled } from \"../../utils/theme\";\n\ninterface SkillsProps {\n}\n\nconst SkillsList = styled.div`\n    font-family: ${props => props.theme.headerFont}\n`;\n\nconst Level = styled.span`\n    font-weight: normal;\n`\n\nexport function Skills(props: SkillsProps): JSX.Element {\n\n    return (\n        <div>\n            <SectionName><Icon type=\"construct\"/> Skills</SectionName>\n            <SkillsList>\n                <p><Level>Experienced</Level>: React, TypeScript, Node.js, HTML, SCSS, MongoDB</p>\n                <p><Level>Working Knowledge</Level>: Python, SQL, Meteor, Docker, Express, Amazon SQS, Amazon Labmda</p>\n                <p><Level>Previous Experience</Level>: AngularJS, Express</p>\n            </SkillsList>\n        </div>\n    );\n}\n","import * as React from \"react\";\n\nimport { styled } from \"../../utils/theme\";\nimport { Experience } from \"./Experience/Experience\";\nimport { Education } from \"./Education/Education\";\nimport { Skills } from \"../Skills/Skills\";\n\ninterface PageBodyProps {\n}\n\nconst BodyDiv = styled.div`\n    padding-left: 1em;\n`;\n\nconst TwoColumns = styled.div`\n    display: grid;\n    grid-template-columns: 2fr 1fr;\n    grid-column-gap: 1em;\n`\n\nexport function PageBody(props: PageBodyProps): JSX.Element {\n\n    return (\n        <BodyDiv>\n            <Experience />\n            <TwoColumns>\n                <Education />\n                <Skills />\n            </TwoColumns>\n        </BodyDiv>\n    );\n}\n","import React from \"react\";\nimport { ThemeProvider } from \"styled-components\";\n\nimport \"./App.css\";\nimport { PageHeader } from \"./sections/PageHeader/PageHeader\";\nimport { defaultTheme, styled } from \"./utils/theme\";\nimport { PageBody } from \"./sections/PageBody/PageBody\";\n\nconst Resume = styled.div`\n  font-family: ${props => props.theme.bodyFont};\n  font-weight: 300;\n  font-size: 16px;\n`;\n\nexport function App() {\n  return (\n    <ThemeProvider theme={defaultTheme}>\n      <Resume className=\"resume\">\n        <PageHeader />\n        <PageBody />\n      </Resume>\n    </ThemeProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}